head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2005.10.02.04.56.19;	author khtan;	state Exp;
branches;
next	1.10;

1.10
date	2005.10.02.04.07.42;	author khtan;	state Exp;
branches;
next	1.9;

1.9
date	2005.09.30.23.49.05;	author khtan;	state Exp;
branches;
next	1.8;

1.8
date	2005.09.30.23.17.44;	author khtan;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.29.23.11.35;	author khtan;	state Exp;
branches;
next	1.6;

1.6
date	2005.09.29.22.31.17;	author khtan;	state Exp;
branches;
next	1.5;

1.5
date	2005.09.29.16.43.24;	author khtan;	state Exp;
branches;
next	1.4;

1.4
date	2005.09.28.04.41.36;	author khtan;	state Exp;
branches;
next	1.3;

1.3
date	2005.09.28.04.35.32;	author khtan;	state Exp;
branches;
next	1.2;

1.2
date	2005.09.27.04.43.53;	author khtan;	state Exp;
branches;
next	1.1;

1.1
date	2005.09.27.03.52.33;	author khtan;	state Exp;
branches;
next	;


desc
@@


1.11
log
@update
@
text
@// $Id: Class1.cs,v 1.10 2005/10/02 04:07:42 khtan Exp khtan $
// <author value="Kwee Heong Tan">
// <course value="cis234n">
// <date value="$Date: 2005/10/02 04:07:42 $">
using System;
using System.Diagnostics;
using System.Globalization; // fxcop
[assembly:CLSCompliant(true)] // fxcop
namespace DailyRate
{
	/// <summary>
    /// Functionally, this program calculates the commission fee by requesting
    /// 2 inputs from the user ( daily rate, number of days )
	/// </summary>
    /// <remarks>
    /// This class also serves the following learning purposes:
    /// 1) Catching exceptions, anticipated and unanticipated
    /// 2) Use of comment tags
    /// 3) Use of fxcop ( //www.gotdotnet.com/team/fxcop ), a code analysis tool
    ///    Changes marked "fxcop" in the comments were motivated by the tool.
    ///    The advantage is that security and more advanced practices are caught and learnt
    ///    earlier
    /// 4) A simple test driver and test data files is used in runtest.bat
    /// </remarks>

	class Class1
	{
        /// <summary>
        /// Main entry point, serves to catch all unanticipated exceptions
        /// </summary>
		static void Main()
		{
          try{
			// (new Class1()).run(); // fxcop - mark method as static
			run();
          }catch(Exception e){
            writeExceptionMessage("Unhandled System.Exception! "+e.Message);
          }catch{ // see FxCop CA2102 Catch non-CLSCompliant exceptions in general handlers
            // <see href="http://www.gotdotnet.com/team/fxcop/Docs/Rules/Security/CatchNonClsCompliantExceptionsInGeneralHandlers.html" />
            writeExceptionMessage("non-CLSCompliant exception!");
          }
		}
        /// <summary>
        /// Write exception message to console
        /// </summary>
        /// <param name="message">Message string to print out</param>
        static private void writeExceptionMessage(string message){
           StackFrame CallStack = new StackFrame(1, true);
           Console.WriteLine("Error: "+message+ " [Function: "+CallStack.GetMethod()+", Line: "+CallStack.GetFileLineNumber()+"]");
        }
        /// <summary>
        /// Called from Main, contains top most logic of program and handling all anticipated exceptions
        /// </summary>
		public static void run()
		{
			double dailyRate = readDouble("Enter your daily rate: ");
			int noOfDays = readInt("Enter the number of days: ");
            if(dailyRate<0){ // No need to throw here because can handle and not call writeFee
              Console.WriteLine("Daily rate cannot be negative!");
            }else if(noOfDays<0){
              Console.WriteLine("Number of days cannot be negative!");
            }else{
              writeFee(calculateFee(dailyRate, noOfDays));
            }
		}
        /// <summary>
        /// Read and validate a double from user
        /// </summary>
        /// <param name="prompt">Read a double value from console</param>
        /// <returns>Valid double value</returns>
		static private double readDouble(string prompt)
		{
			Console.Write(prompt);
			string line = Console.ReadLine();
            double value=0.0;
            try{
              value=double.Parse(line,CultureInfo.InvariantCulture); // fxcop
            }catch(FormatException e){ // most likely 
              writeExceptionMessage(e.Message);
            }catch(OverflowException e){
              writeExceptionMessage(e.Message);
            }catch(ArgumentNullException e){
              writeExceptionMessage(e.Message);
            }
            return value;
		}
        /// <summary>
        /// Read and validate an integer from user
        /// </summary>
        /// <param name="prompt">read an integer from console</param>
        /// <returns>Valid int value</returns>
		static private int readInt(string prompt)
		{
			Console.Write(prompt);
			string line = Console.ReadLine();
            int value=0;
            try{
              value=int.Parse(line,CultureInfo.InvariantCulture); // fxcop
            }catch(FormatException e){ // most likely 
              writeExceptionMessage(e.Message);
            }catch(OverflowException e){
              writeExceptionMessage(e.Message);
            }catch(ArgumentNullException e){
              writeExceptionMessage(e.Message);
            }
            return value;
		}
        /// <summary>
        /// Compute consulting fee
        /// </summary>
        /// <param name="dailyRate">The daily commission rate in double precision</param>
        /// <param name="noOfDays">Whole number of days worked</param>
        /// <returns>dailyRate*noOfDays double value</returns>
		static private double calculateFee(double dailyRate, int noOfDays)
		{
          double result=0.0;
          try{
            result=dailyRate*noOfDays;
          }catch(OverflowException e){
              writeExceptionMessage(e.Message);
          }
          return result;
		}
        /// <summary>
        /// Write consulting fee to console
        /// </summary>
        /// <param name="fee">Value of fee in double precision</param>
		static private void writeFee(double fee)
		{
          double result=0.0;
          try{
            result= fee * 1.1;
          }catch(OverflowException e){
              writeExceptionMessage(e.Message);
          }
          Console.WriteLine("The consultant's fee is: {0}", result);
		}
	}
}
@


1.10
log
@update documentation
@
text
@d1 1
a1 1
// $Id: Class1.cs,v 1.9 2005/09/30 23:49:05 khtan Exp khtan $
d4 1
a4 1
// <date value="$Date: 2005/09/30 23:49:05 $">
d17 7
a23 2
    /// 1) catching exceptions, anticipated and unanticipated
    /// 2) use of comment tags
@


1.9
log
@fxcop error cleanup
@
text
@d1 1
a1 1
// $Id: Class1.cs,v 1.8 2005/09/30 23:17:44 khtan Exp khtan $
d4 1
a4 1
// <date value="$Date: 2005/09/30 23:17:44 $">
d7 1
a7 3
// fxcop recommended
using System.Security.Permissions;
using System.Globalization;
d47 1
a47 1
        /// Main driver
@


1.8
log
@update for fxcop recommendations
@
text
@d1 1
a1 1
// $Id: Class1.cs,v 1.7 2005/09/29 23:11:35 khtan Exp khtan $
d4 1
a4 1
// <date value="$Date: 2005/09/29 23:11:35 $">
d22 1
d31 2
a32 1
			(new Class1()).run();
d34 1
a34 1
              writeExceptionMessage("Unhandled System.Exception! "+e.Message);
d51 1
a51 1
		public void run()
@


1.7
log
@update writeExceptionMessage with StackFrame solution
@
text
@d1 1
a1 1
// $Id: Class1.cs,v 1.6 2005/09/29 22:31:17 khtan Exp khtan $
d4 1
a4 1
// <date value="$Date: 2005/09/29 22:31:17 $">
d7 4
a10 1

d27 1
a27 2
        /// <param name="args">Unused, for now</param>
		static void Main(string[] args)
a37 5
        static private void writeExceptionMessage(string Message){
           StackFrame CallStack = new StackFrame(1, true);
           Console.WriteLine("Error: "+Message+ " [Function: "+CallStack.GetMethod()+", Line: "+CallStack.GetFileLineNumber()+"]");
        }
#if false
a40 1
        /// <param name="fname">Name of function</param>
d42 3
a44 8
        static void writeExceptionMessage(string fname, string message){
          /* Cheap imitation of __FILE__, without the __LINE__
             Note that some solutions that use StackFrame actually gives the incorrect line number,
             unless the stack frame is created at each exception point instead of inside a common function.
                http://www.hanselman.com/blog/fromradio.ashx?external_referrer=http%3A//www.google.com/search%3Fclient%3Dopera%26rls%3Den%26q%3D__FILE__+equivalent+in+c%2523%26sourceid%3Dopera%26ie%3Dutf-8%26oe%3Dutf-8&url=http://radio.weblogs.com/0106747/2003/06/12.html
             also has runtime implications while __FILE__ is substituted at compile time, ie no runtime impact
           */
          Console.WriteLine(message + "(in function "+fname+"}");
a45 1
#endif
d66 1
a66 1
		public double readDouble(string prompt)
d72 1
a72 1
              value=double.Parse(line);
d87 1
a87 1
		public int readInt(string prompt)
d93 1
a93 1
              value=int.Parse(line);
d109 1
a109 1
		public double calculateFee(double dailyRate, int noOfDays)
d123 1
a123 1
		public void writeFee(double fee)
@


1.6
log
@check for negative inputs, update documentation
@
text
@d1 1
a1 1
// $Id: Class1.cs,v 1.5 2005/09/29 16:43:24 khtan Exp khtan $
d4 1
a4 1
// <date value="$Date: 2005/09/29 16:43:24 $">
d6 1
d30 1
a30 1
              writeExceptionMessage("Main","Unhandled System.Exception! "+e.Message);
d33 1
a33 1
            writeExceptionMessage("Main","non-CLSCompliant exception!");
d36 5
d55 1
d84 1
a84 1
              writeExceptionMessage("readDouble",e.Message);
d86 1
a86 1
              writeExceptionMessage("readDouble",e.Message);
d88 1
a88 1
              writeExceptionMessage("readDouble",e.Message);
d105 1
a105 1
              writeExceptionMessage("readInt",e.Message);
d107 1
a107 1
              writeExceptionMessage("readInt",e.Message);
d109 1
a109 1
              writeExceptionMessage("readInt",e.Message);
d125 1
a125 1
              writeExceptionMessage("calculateFee",e.Message);
d139 1
a139 1
              writeExceptionMessage("writeFee",e.Message);
@


1.5
log
@writeMessage->writeExceptionMessage
@
text
@d1 4
a4 4
// $Id: Class1.cs,v 1.4 2005/09/28 04:41:36 khtan Exp khtan $
/// <author value="Kwee Heong Tan">
/// <course value="cis234n">
/// <date value="$Date: 2005/09/28 04:41:36 $">
d10 2
a11 1
	/// Summary description for Class1.
d13 5
d20 4
d31 1
d35 3
d49 3
d56 7
a62 1
			writeFee(calculateFee(dailyRate, noOfDays));
d64 3
d85 3
d106 3
d114 7
a120 1
			return dailyRate * noOfDays;
d122 3
@


1.4
log
@update header comments
@
text
@d1 1
a1 1
// $Id: Class1.cs,v 1.3 2005/09/28 04:35:32 khtan Exp khtan $
d4 1
a4 1
/// <date value="$Date$">
d19 1
a19 1
              writeMessage("Main","Unhandled System.Exception! "+e.Message);
d21 1
a21 1
            writeMessage("Main","non-CLSCompliant exception!");
d26 1
a26 1
        static void writeMessage(string fname, string message){
d51 1
a51 1
              writeMessage("readDouble",e.Message);
d53 1
a53 1
              writeMessage("readDouble",e.Message);
d55 1
a55 1
              writeMessage("readDouble",e.Message);
d69 1
a69 1
              writeMessage("readInt",e.Message);
d71 1
a71 1
              writeMessage("readInt",e.Message);
d73 1
a73 1
              writeMessage("readInt",e.Message);
d91 1
a91 1
              writeMessage("writeFee",e.Message);
@


1.3
log
@add comment tags, eg <param> and <returns>
@
text
@d1 4
a4 3
// $Id: Class1.cs,v 1.2 2005/09/27 04:43:53 khtan Exp khtan $
// <name value="Kwee Heong Tan">
// <date value="$Date">
@


1.2
log
@add exceptions to cover all cases, regardless of likelihood
@
text
@d1 3
a3 1
// $Id: Class1.cs,v 1.1 2005/09/27 03:52:33 khtan Exp khtan $
d23 2
d26 6
d40 2
a41 1

d58 2
a59 1

d76 3
a78 1

d83 1
a83 1

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
// $Id$
d13 1
d15 9
a23 2
		}

d35 11
a45 1
			return double.Parse(line);
d52 11
a62 1
			return int.Parse(line);
d72 7
a78 1
			Console.WriteLine("The consultant's fee is: {0}", fee * 1.1);
@
