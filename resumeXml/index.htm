<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<!-- index.htm -->
<head><title>Kwee Tan : Resume</title>
   <meta http-equiv="content-type" content="text/html; charset=utf-8"/>
   <style type="text/css"><!--
      @import url("../style/common.css");
      @import url("override.css");
      ul {margin-top:0px};
   --></style>
</head>
<body>
<table>
   <tr>
      <td>
         <table>
            <tr>
               <td class="nav">
               <!-- This is the left nav pane : use text only for resizability -->
                  <!-- start of left pane -->
                  <dl>
                     <dd><strong>Goto:</strong></dd>
                     <dd><a href="../index.htm">Top</a></dd>

                   </dl>
                   <dl>
                     <dd><strong>Resume:</strong></dd>
                     <dd><a href="#synopsis">Synopsis</a></dd>
                     <dd><a href="#expertise">Expertise</a></dd>
                     <ul>
                        <li><a href="#pa">Software QA and Test Automation</a></li>
                        <li><a href="#sd">Software Development and Maintenance</a></li>
                        <li><a href="#eda">Electronic Design Automation</a></li>
                     </ul>
                     <dd><a href="#history">History</a></dd>
                     <dd><a href="#education">Education</a></dd>
                     <dd><a href="#technical">Technical Lists</a></dd>
                     <dd><a href="#publications">Publications</a></dd>
                  </dl>
                  <!-- end of left pane -->
               </td>
               <td class="main">
               <!-- This is the middle pane : use text only for resizability -->
                     <!-- start of middle pane -->
<h2 align="center">Online Resume</h2>
<p id="synopsis"><b>Synopsis</b>
   <ul>
      <li>Skilled in both software development and maintenance on Windows, Unix and Linux platforms.</li>
      <li>Software engineering approach to Configuration and Process Automation.</li>
      <li>Effective team member who is comfortable in leading or collaborating.</li>
      <li>M.Sc in Computer Science with research and teaching experience.</li>
   </ul>
</p>
<p id="expertise"><b>Expertise</b>
   <ul>
   <li id="pa">Software QA and Test Automation</li>
      <ul>
          <li>Bridged the DevOps gap by delivering <a href="https://www.protractortest.org">Protractor</a> tests on <a href="https://www.jenkins.io">Jenkins</a> and <a href="https://circleci.com">CircleCi</a>, using virtual and <a href="https://www.docker.com">Docker</a> machines</li>
          <li>Championed Behavioral Driven Development (BDD) in product and development team</li>
             <ul>
                 <li>Integrated <a href="https://specflow.org">SpecFlow</a> into development environment and implemented Behavioral Driven Development (BDD) tests</li>
                 <li>Enhanced <a href="https://www.atlassian.com/software/bamboo">Bamboo</a> continuous integration with BDD tests for nightly regression runs</li>
                 <li>Encouraged and trained manual testers in BDD test implementation</li>
                 <li>Worked with product managers in writing acceptance test criteria as BDD test features</li>
                 <li>Introduced documentation templates to facilitate communication between disparate Requirements ( <a href="https://www.jamasoftware.com/blog/looking-for-jama-contour/">Contour</a> ), Manual Test System ( <a href="https://www.microfocus.com/en-us/products/alm-quality-center/overview">HP ALM</a> ) and Development ( Visual Studio and Perforce ) systems. This is to facilitate
              traceability and metrics tracking</li>
             </ul>
          <li><a id="pg" href="../processGraph/index.htm">Design and implementation of a Perl-based comprehensive, flexible, scalable production system</a> that encompass Build, Test, Install, Reporting and Analysis, with the following capabilities :</li>
            <ul>
               <li>graphs to control and visualize dependencies </li>
               <li>single point of configuration</li>
               <li>single point of control for Unix ( Solaris Grid Engine ) and Windows ( rsh ) for all processes</li>
               <li>build/test/metrics subgraphs to combine for different processes such as Build only, Build and Test, Build,Test and Metrics</li>
               <li>facilities for debugging, restart, bypass and halt arbitary points in the graph</li>
               <li>nodes of graph can be run individually or as part of a graph</li>
            </ul>
         <li>Designed and developed advanced automated test infrastructures for functional, configuration and unit-level testing. Test systems can be built from scratch or based on commercial products such as Microsoft Visual Test.</li>
         <li>Extended and integrated test process with build and release processes for faster turnaround.</li>
         <li>Extended processes for metrics gathering for trending.</li>
         <li>Developed internal software tools such as flexible trace and debug package and a automated GUI test system.</li>
      </ul>
   <br>
<li id="sd">Software Development and Maintenance</li>
   <ul>
      <li>Participated in all aspects of software development cycle - requirements, design, implementation, maintenance, testing and customer support.</li>
      <li>Practical adoption of Extreme methodology where possible, such as continuous integration, ongoing testing, frequent small but complete small releases often and code re-factoring.</li>
      <li>Enhanced object-oriented solutions with pattern-based designs such as singletons, smart pointers and reference counting.</li>
      <li>Leveraged use of modern template based C++ libraries including <a href="http://loki-lib.sourceforge.net">Loki</a>, <a href="http://www.boost.org">Boost</a> and <a href="http://xparam.sourceforge.net">XParam</a> for quality and timely solutions.</li>
      <li>Depth of experience in multi platforms such as Unix, Linux and WinNT :</li>
      <ul>
         <li>Simultaneous development (test, implement, test) on Unix and WinNT ( no separate porting required ).</li>
         <li>Use of <a href="http://www.stlport.org">STLport</a> to provide STL platform portability.</li>
         <li>Designated as the team resource on WinNT and VC5/6 development issues.</li>
         <li>Platform agnostic as a GNU and Emacs Development Environment power user on both Unix and WinNT.</li>
      </ul>
      <li>Completed basic Java and C#, advanced Java and XML training.</li>
   </ul>
   <br>
<li id="eda">Electronic Design Automation</li>
   <ul>
      <li>Background in Electrical Engineering with experience in electronic circuit analysis, design and troubleshooting.</li>
      <li>Familiar with schematic and language design methodology ( VHDL, Verilog, SystemC ) and simulators.</li>
      <li>Library Management area : designed, implemented and performance tuned EDA oriented API to bridge legacy products to proprietary Oracle tool.</li>
      <li>IC Verification area : maintained and supported 7 tools ( 7M lines of code ) for parasitic extraction, design rule checking, electrical rule checking, layout verification and netlist input/output.</li>
      <li>Experienced in advanced data structures and algorithms such as graph algorithms, parallel algorithms and simulated annealing.</li>
   </ul>
</ul>
</p>
<p id="history"><b>History</b>
<ul>
    <li><a href="http://www.eaglecapsoftware.com">EagleCap Software</a>
        ( Sherwood, OR :
        Oct17 -
        present
        )
        <i>senior software engineer in test</i>
    </li>
    <ul>
       <li>Employee #17 in Aviation-based startup company</li>
       <li>Team was contracted to work with a large airline company to create their next generation operations and control application. This Angular app is designed to replace 10 legacy software and miscellaneous Excel spreadsheets to give the user a 360 degree view leading to improved planning and decision making.</li>
       <li>Part of 3 pronged test strategy covering manual testing, middleware API testing and e2e GUI testing.</li>
       <li>Guiding principle of making automation progress, in spite of roadblocks, shifting requirements, under-integrated test machines and other aspects of a high pressure, high delivery system. Strategies include tiptoeing around unstable functionality, data-agnostic tests first and data-specific tests later. Persisted in repeated overtures to IT over an 8 month period to find the right person/group to open up download access for Protractor webdriver updates to work inside client's IT environment. This is a Day-one problem and the first impediment to integrating with the client's IT system.</li>
       <li>Implemented a GUI e2e test automation system based on Protractor ( Angular, Typescript )</li>
       <ul>
           <li>Single configuration setting to support multiple usage scenarios</li>
           <ol>
               <li>Automation: Chrome and Firefox in full GUI</li>
               <li>Development : Headless Chrome</li>
               <li>Continuous Delivery : Headless Firefox ( only platform provisioned from IT )</li>
           </ol>
           <li>Simple automated coding style assistant with Tslint and Prettier</li>
           <li>Common and functional-based libraries to support reuse in production test, loop tests and stress tests.</li>
           <li>Readme of coding tips and best practices for Angular developers working with Protractor</li>
           <li>Extended end-to-end  tests by coupling basic API to end point GUI verification</li>
           <li>Tests provide a base to drive service virtualization using Mountebank</li>
           <li>Want to know how the 201th browser behaves? Implemented N+1 browser testing using Protractor, Mountebank and Gatling.</li>
       </ul>
       <li>Achieved unusual practice of running e2e tests as part of Bamboo CICD process. This made use of multicapabilites of Protractor to half the runtime of the e2e tests with 4 browsers.</li>
       <li>Improved e2e test reliability with layers of test promotion from single execution to looped runs to random stress runs and also testing on a slow machine.</li>
       <li>On an internal project, designed and implemented a C# GUI testing framework based on Windows Application Driver and xUnit.net.</li>
       <ul>
           <li>Integrated build and GUI testing into Jenkins process running Windows 2013 Server virtual machines</li>
           <li>Introduced failure snapshots and extended incubation testing for improved reliability</li>
       </ul>
    </ul>
</ul>
<ul>
   <li><a href="http://www.jeppesen.com">Jeppesen ( Aviation )</a>
                  ( Wilsonville, OR :
                    Jun13 -
                    Sep17
                  )
                  <i>senior software engineer in test</i>
   </li>
   <ul>
      <li>One of two C# test automation engineers, supporting four manual test engineers on suite of flight planning product.</li>
      <ul>
        <li>Product architecture is client-server, with WPF-based GUI and legacy MFC-based GUI.</li>
        <li>Combination of automated and manual testing allows team to effectively apply automation and manual testing as needed</li>
      </ul>
      <li>Implemented automated round-trip tests with Microsoft Unit Test Framework, to validate backend server functionality</li>
      <li>Implemented viewmodel unit tests of Gui components</li>
      <li>Designed and implemented CodedUi/Telerik Testing Framework (Ttf) Gui testing framework</li>
      <ul>
        <li>Leveraged programmatic Gui test technologies of CodedUi and free Telerik Testing Framework (Ttf)</li>
        <li>The use of two technologies provide the opportunity to check reliability and implementation differences. The primary technology for all tests is CodedUi.</li>
        <li>Designed and implemented task and Gui oriented interfaces to abstract test functionality from the CodedUi or Ttf technology.</li>
        <li>This results in testcases that can run with either technology, and worst case, read and performed manually, to avoid technology obsolescence</li>
     </ul>
   <li>Implemented, deployed and maintain regression test system with live server and dependencies</li>
   <ul>
      <li>Created a ruby-based tool for automatic updates and incremental installs of product and its dependencies</li>
      <li>Created a ruby-based test runner on top of vstest.console.exe that worked with and without Bamboo. Added ability to rerun only failed tests.</li>
      <li>Used dotTrace to track down massive slowdown ( 25x ) of CodedUi tests due to Bamboo agent running as a service</li>
      <ul>
         <li>Confirmed with Tanuki Software that Bamboo's wrapper functionality has inherent flaw</li>
         <li>Found solution by running Bamboo agent in user mode</li>
      </ul>
      <li>Transition build environment from VS 2012 Professional to MSBuild Tools 2015, saving a developer MSDN license</li>
   </ul>
   <li>Implemented and maintain stress and concurrent testing environment</li>
      <ul>
        <li>This is our best representation of a large customer, with 80 concurrent users, 90 days of activity representing 1.2 million flight plans</li>
        <li>System is available for ad hoc and targeted testing by Test and Dev</li>
        <li>Created flexible automation tools for generating massive offline base load or daily live injected mock data</li>
        <li>Used test environment to determine performance characteristics and weaknesses of current implementation</li>
        <li>Concurrent regression level testing uncovered issues not found in concurrent unit tests</li>
      </ul>
   <li>Spearhead and led training for manual testers on C# and automation testing</li>
       <ul>
         <li>Use of Visual Studio, Perforce, Git and other development tools</li>
         <li>Building, running and debugging client and server</li>
         <li>Basic functional programming in C#</li>
         <li>Improved cross training with subject matter manual testers</li>
      </ul>
   <li>Used DotCover to analyze and report code coverage of automated tests</li>
</ul>
   <li><a href="http://www.jeppesen.com">Jeppesen ( Marine )</a>
                  ( Wilsonville, OR :
                    Jun11 -
                    Jun13
                  )
                  <i>senior software QA engineer</i>
   </li>
   <ul>
     <li>Single test engineer responsible for suite of software products covering ship reporting, fleet management and voyage optimization</li>
     <li>Investigated Silverlight testing frameworks from Silvernium to Selenium, and settled on Ttf</li>
     <li>Implemented Ttf test base functionality and set of automated helper functions to assist manual exploratory testing</li>
     <li>Trained team of 4 test engineers on WebAii deployment. This effort was later cancelled.</li>
     <li>Investigated feasibility of technology-agnostic, screen-based testing tool EggPlant</li>
     <li>Designed and coordinated usability and user scenarios testing</li>
     <li>Learned C#, Linq, IronPython, NUnit and MSTest to leverage use of .NET technology used by the products</li>
   </ul>
   <li><a href="http://www.anpc.com">Advanced Navigation and Positioning</a>
                  ( Hood River, OR :
                    Jan09 -
                    Jun11
                  )
                  <i>senior software engineer in test</i>
   </li>
   <ul>
      <li>Support releases with bug fixes, software enhancements, unit and system testing on Alpha Windows NT, Intel Windows XP and Intel QNX machines. Software include C modules and C++ MFC-based GUI applications.</li>
      <li>Implement custom automated unit test harness and unit tests for Pulse Processing functionality</li>
      <li>Design and implement manual test procedures for new modules both for functionality and code coverage</li>
      <li>Requirements extraction and validation from source code analysis</li>
         <ul>
    	   <li type=square>Use of <a href="http://bouml.free.fr">BOUML</a> to extract and trace data dependencies</li>
   	       <li type=square>Augment official production tool Visual C++ 6 with free Visual C++ 2008 Express for better source browsing and analysis</li>
         </ul>
      <li>Created Perl-based tool to emulate "svn status" missing in PVCS V8.3</li>
      <li>Developed <a href="http://www.swig.org">SWIG</a> Perl-based tool to interface and reuse legacy code</li>
      <li>Ongoing exploratory use of <a href="http://www.git-scm.org">Git</a> distributed version control system</li>
      <li>Investigated and piloted <a href="http://cxxtest.tigris.org">CxxTest</a> as a unit test environment for C/C++ code</li>
      <li>Implemented <a href="http://www.docbook.org">DocBook</a> documentation system to leverage common XML content, multiple output ( .chm and .htm ) and variant product user documentation</li>
      <li>Perl-based test assistant for GUI based system testing</li>
      <ul>
        <li type=square>Simplify the management and updating of a multitude of simulation, settings and control files between various system nodes</li>
   	    <li type=square>Flexible configuration file to encapsulate developer and site specific details</li>
   	    <li type=square>High level and unified command format with Checks, Help and Status facilities</li>
      </ul>
   </ul>
<li>Independent projects and training
               ( Tualatin, OR : 
                 Mar08 - 
                 Dec08
               )
               <i>software consultant</i>
</li>
   <ul>
   <li>Completed Agile Web Development with Rails study</li>
   <li>Limited port of <a href="http://modules.sourceforge.net">Environment Modules</a> project to Windows</li>
   </ul>
   <li><a href="http://www.synopsys.com/saber">Synopsys</a>
               ( Hillsboro, OR : 
                 Dec05 - 
                 Feb08
               )
               <i>senior software engineer</i>
   </li>
   <ul>
   <li>Appraised level of Operational dysfunctionality and start triage work, starting with Build process</li>
   <li>Break long held but unproductive practices in legacy Production system</li>
   <li>Incorporated software development metrics ( <a href="http://www.ibm.com/software/awdtools/purify">Purify</a>, <a href="http://www.ibm.com/software/awdtools/purifyplus">PureCoverage</a> and <a href="http://www.coverity.com">Coverity</a> ) into Production system.</li>
   <li><a href="#pg">Designed and implemented Graph-based Software Production Automation (Perl)</a></li>
   <li>Specify, purchase and fill-in administration of fringe Corporate platform ( Windows 32 and 64 bit)</li>
   <li>Promote use of Twiki for communication, documentation and access of Operational work and past practices. This anticipated the introduction of Corporate Document Retention policy by a year.</li>
   <li>Prototyped MySQL database for comprehensive process and testing results.</li>
   <li>Investigate use of Ruby on Rails for analysis and visualization of process metrics and trends.</li>
   </ul>
   <li>Independent projects and training
               ( Tualatin, OR : 
                 Jun05 - 
                 Dec05
               )
               <i>software consultant</i>
   </li>
   <ul>
   <li>Took 3 courses at Portland Community College, covering Database Development, Web Scripting and C#.</li>
   <li>Implemented CSS-based 3 pane layout to replace table-based HTML pages</li>
   <li>Investigated FxCop and NUnit for C# development process.</li>
   <li>Extended Database class to learn about ASP.NET and XML Web services.</li>
   </ul>
   <li><a href="http://www.mentor.com/products/fpga_pld/synthesis">Mentor Graphics</a>
                  ( Wilsonville, OR : 
                    Dec03 - 
                    May05
                  )
                  <i>senior software engineer</i>
   </li>
   <ul>
   <li>Investigated, designed, implemented coverage gathering process based on PureCoverage for Windows.</li>
   <li>Worked with <a href="http://www.imagix.com">Imagix</a> to produce call tree colorings to visualize coverage gaps and dependencies.</li>
   <li>Establish baselines utilizing 8000 test cases on 1 million lines of code. Each baseline took 1.5 weeks of run time.</li>
   <li>Used object-oriented Perl to fully implement a minimal specification of a new test launcher.</li>
   <li>Increased testing throughput from one build a day to three concurrent builds a day.</li>
   <li>Smart grouping of test cases into a dependency hierarchy of blocks, allowing early failure detection and improving confidence of downstream groups.</li>
   <li>Allow Lego-like mix and match of builds and test groups for flexible scheduling.</li>
   <li>Increased reliability and usability by strobed runs and pause/continue/abort control.</li>
   </ul>
   <li>Intel
                  ( Hillsboro, OR : 
                    Jul03 - 
                    Dec03
                  )
                  <i>software consultant</i>
   </li>
   <ul>
   <li>Investigated and wrote product requirements document for new product evaluation/update/install CD for Intel Software Products division.</li>
   <li>Designed and implemented a Windows/Linux "smart" C++ utility to gather licence and install information and recommend subscription based options for the user.</li>
   <li>Licensing is based on the FlexLM API, while install detection is platform specific, RPM on Linux and Win32 API on Windows.</li>
   <li>Leveraged open sourced libraries Boost, Loki and XParam to meet tight delivery datelines.</li>
   </ul>
   <li>Independent projects
                  ( Tualatin, OR : 
                    Oct02 - 
                    Jul03
                  )
                  <i>software consultant</i>
   </li>
   <ul>
   <li>Designed and implemented an extensible set of software utilities based on Boost Graph Library and AT&amp;T's Graph Visualization package to allow the study of EDA algorithms. This included support for D calculus, flexible debug and trace facilities and command line handling.</li>
   <li>Implemented a basic automatic test pattern generation ( ATPG ) algorithm.</li>
   <li>Learnt basic VHDL and SystemC hardware and system modeling languages, using Blue Pacific HDL tools.</li>
   <li>Studied C# from "Inside C#" by Tom Archer and the .NET SDK.</li>
   <li>Studied Managed C++ and how to use STL with managed garbage-collected types.</li>
   <li>Completed study of Exceptional C++, by Herb Sutter.</li>
   </ul>
   <li>Mentor Graphics
                  ( Wilsonville, OR : 
                    Mar00 - 
                    Sep02
                  )
                  <i>senior software development engineer</i>
   </li>
   <ul>
   <li>Primary engineer responsible for the extension of Mentor's proprietary C based Procedural Interface for parts library access. Careful design allowed the implementation to be in C++, with a bridge class interfacing the legacy C code. This provided an EDA object oriented layer on top of Oracle databases for managing electronic design, materials and enterprise data.</li>
   <li>Collaborated closely with product development team members located in Nuremberg, Germany.</li>
   <li>Implemented Java JNI interface to the product.</li>
   <li>Implemented new C++ Interface to provide better performance and usage compatibility. The implementation uses VC6 on Win2K/WinNT and gcc on Solaris and HPUX. Utilized STL extensively and advanced modular C++ design techniques to streamline dependencies and simplify development. Implemented 7 man-weeks project in 4 weeks. </li>
   <li>Utilized gprof and Quantify for performance tuning, improving query/reply time by 10x.</li>
   <li>Improved code quality with memory checking tools ( Purify ).</li>
   </ul>
   <li>Genedax
                  ( Portland, OR : 
                    Dec97 - 
                    Mar00
                  )
                  <i>software development engineer</i>
   </li>
   <ul>
   <li>Developed and implemented an MFC compatible C++ persistence model for a VHDL COM-based product.</li>
   <li>Designed and implemented a Windows NT integrated Build/Test/Release/Install system linking Microsoft Visual SourceSafe for version control, Visual Studio for compile and builds, and InstallShield for installation and CD creation. The framework itself was designed and implemented in ActiveState Perl.</li>
   <li>Integrated and tested VC++ VHDL 87 and 93 validation modules developed by an off-site contractor.</li>
   </ul>
   <li>Mentor Graphics
                  ( Wilsonville, OR : 
                    Feb94 - 
                    Nov97
                  )
                  <i>software development engineer</i>
   </li>
   <ul>
   <li>Responsible for the software maintenance of the CheckMate IC verification product family. This is a C-based set of 7 tools with a total of 7 million lines of code. Engineering work involved extensive use of gcc and gdb on Solaris, HP-UX and IBM AIX. Performed large-scale code re-factoring to legacy code to increase maintainability and robustness.</li>
   <li>Close collaboration with Dallas, Texas Instruments team on bug fixing, code sharing and releases.</li>
   <li>Designed and implemented a Perl-based Unix build and test environment. This includes using Perl modules for load monitoring, task synchronization, metric collection and dbm database access.</li>
   <li>Directed and trained entry-level engineer.</li>
   <li>Re-engineered the release process by integrating Build, Test and Release flow, slashing 40% off the final release schedule.</li>
   <li>Provided engineering support to Customer Support and Field. Team received Achievement Award in 1995 for outstanding effort.</li>
   </ul>
   <li>Mentor Graphics
                  ( Wilsonville, OR : 
                    Apr90 - 
                    Jan94
                  )
                  <i>software quality assurance engineer</i>
   </li>
   <ul>
   <li>Responsible for quality assurance engineering functions on two key framework products on multiple platforms. This includes installation, configuration and interoperability testing.</li>
   <li>Architected, developed and maintained a flexible and extensible automated test environment supporting interactive and batch operations, flexible selection of test cases and parallel execution. Clean architecture allowed plugging any source control management system.</li>
   </ul>
</ul>
</p>
<p id="education"><b>Education</b>
   <ul>
   <table border="0">
       <tr>
           <td rowspan="3" bgcolor="#9acd32">Michigan State University<br>East Lansing, MI</td>
           <td><i>Sep 1987 - Mar 1990</i></td>
      </tr>
      <tr><td>M. Sc. (Computer Science). Passed at Ph.D. Qualifying Level, Major GPA 3.85/4.0</td></tr>
      <tr><td>Graduate FellowShip (Sep 1989 - Mar 1990 )</td></tr>
      <tr>
          <td rowspan="3" bgcolor="#9acd32">Auckland University<br>Auckland, New Zealand</td>
          <td><i>Jan 1979 - Dec 1981</i></td>
      </tr>
      <tr><td>B.E. (Electrical), First Class Honors, Ranked 2nd of 65</td></tr>
      <tr><td>Senior Prize in Electrical Engineering ( 1979, 1980, 1981 )</td></tr>
   </table>
   </ul>
</p>
<p id="technical"><b>Technical Lists</b>
   <ul>
   <table border="0">
      <tr>
      <td bgcolor="#9acd32">Operating Systems</td>
      <td>Windows XP, Windows 10, UNIX - HPUX, Solaris, SunOS, AIX,  Linux, Mach</td>
      </tr>
      <tr>
      <td bgcolor="#9acd32">Languages</td>
      <td>C#, Typescript, Javascript, Java, Python, Perl, Bash</td>
      </tr>
      <tr>
      <td bgcolor="#9acd32">Web</td>
      <td>Javascript, CSS, XML, XSLT, <a href="http://www.twiki.org">Twiki</a>, <a href="http://www.rubyonrails.org">Ruby on Rails</a></td>
      </tr>
      <tr>
      <td bgcolor="#9acd32">Virtualization</td>
      <td>Docker(Linux and Windows), VirtualBox, VMWare</td>
      </tr>
      <tr>
      <td bgcolor="#9acd32">Unit Testing Framework</td>
      <td>MS Unit Test, NUnit, Xunit, Jasmine, Protractor, Junit4, Junit5, PyTest, Test::More</td>
      </tr>
      <tr>
          <td bgcolor="#9acd32">Gui Testing Framework</td>
          <td>CodedUi, Windows Application Driver, Protractor</td>
      </tr>
      <tr>
      <td bgcolor="#9acd32">Version Control</td>
      <td><a href="http://www.git-scm.org">Git</a>, Github, Bitbucket, <a href="http://www.perforce.com">Perforce</a>, <a href="http://subversion.apache.org">Subversion</a>, <a href="http://www.nongnu.org/cvs">CVS</a>, RCS, Visual SourceSafe</td>
      </tr>
      <tr>
      <td bgcolor="#9acd32">Continuous Integration and Delivery</td>
      <td>Jenkins, Bamboo, CircleCi</td>
      </tr>
   </table>
   </ul>
</p>
<p id="publications"><b>Publications</b>
   <ul>
   <li><i>Kwee Heong Tan</i>
                   <a href="http://www.drdobbs.com/architecture-and-design/184401676">"Exploring EDA algorithms with the Boost Graph Library" </a>
                   <i>C/C++ User's Journal</i>
                   ( Jul2003
                   )
               </li>
   <li><i>Richard J Enbody, Gary Lynn and Kwee Heong Tan</i>
                   <a href="http://portal.acm.org/citation.cfm?id=127644">"Routing the 3-D Chip"</a>
                   <i>ACM/IEE Design Automation Conference</i>
                   ( 1991
                   )
               </li>
   </ul>
</p>
                     <!-- start of middle pane -->
               </td>
            </tr>
         </table>
       </td>
       <td class="pic">
         <table>
           <tr>
               <td>
               <!-- This is the right pic pane : absolute sized to prevent squishing -->
                  <!-- start of right pane -->
                  <a href="behind.htm">Behind the Scenes</a>
                  <!-- end of right pane -->
               </td>
           </tr>
        </table>
      </td>
   </tr>
</table>
</body>
</html>
